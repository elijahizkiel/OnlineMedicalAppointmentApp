package com.example.OnlineMedicalAppointment.ui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import com.example.OnlineMedicalAppointment.model.Message;
import com.example.OnlineMedicalAppointment.model.User;
import com.example.OnlineMedicalAppointment.database.DatabaseAccessor;

/**
 * Panel for displaying and sending messages between two users (Patient and Doctor).
 * This panel is designed to be used by both user types.
 */
public class ChatPanel extends JPanel {

    private final User currentUser;
    private final User otherUser;
    private final String chatRoomId;
    private final JTextArea messageArea;
    private final JTextField messageInput;
    private final JButton sendButton;
    private final JButton refreshButton;

    private static final DateTimeFormatter TIMESTAMP_FORMATTER = DateTimeFormatter.ofPattern("HH:mm");

    /**
     * Constructs the ChatPanel for a chat between the current user and another user.
     * @param currentUser The user currently viewing the chat.
     * @param otherUser The other user in the chat (the recipient/sender).
     */
    public ChatPanel(User currentUser, User otherUser) {
        this.currentUser = currentUser;
        this.otherUser = otherUser;
        // Get or create the chat room ID between the two users
        this.chatRoomId = DatabaseAccessor.getChatRoomIdBetweenUsers(currentUser.getUserID(), otherUser.getUserID());

        setLayout(new BorderLayout(10, 10));
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Title
        JLabel title = new JLabel("Chat with " + otherUser.getFName() + " " + otherUser.getLName());
        title.setFont(new Font("Arial", Font.BOLD, 18));
        add(title, BorderLayout.NORTH);

        // Message display area
        messageArea = new JTextArea();
        messageArea.setEditable(false);
        messageArea.setLineWrap(true);
        messageArea.setWrapStyleWord(true);
        messageArea.setFont(new Font("Monospaced", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(messageArea);
        add(scrollPane, BorderLayout.CENTER);

        // Input panel
        JPanel inputPanel = new JPanel(new BorderLayout(5, 0));
        messageInput = new JTextField();
        sendButton = new JButton("Send");
        refreshButton = new JButton("Refresh");

        inputPanel.add(messageInput, BorderLayout.CENTER);
        inputPanel.add(sendButton, BorderLayout.EAST);
        inputPanel.add(refreshButton, BorderLayout.WEST); // Added refresh button to input panel

        add(inputPanel, BorderLayout.SOUTH);

        // Add action listeners
        sendButton.addActionListener(new SendButtonListener());
        messageInput.addActionListener(new SendButtonListener()); // Send on Enter key
        refreshButton.addActionListener(e -> loadMessages());

        // Load initial messages
        loadMessages();
    }

    /**
     * Loads messages for the current chat room and updates the display.
     */
    private void loadMessages() {
        messageArea.setText(""); // Clear current messages
        List<Message> messages = DatabaseAccessor.getMessages(chatRoomId);

        if (messages == null || messages.isEmpty()) {
            messageArea.setText("No messages yet. Start the conversation!");
        } else {
            for (Message msg : messages) {
                String senderName = (msg.getSenderId() == currentUser.getUserID()) ? "You" : msg.getSenderName();
                String display = String.format("[%s] %s: %s\n",
                        msg.getTimestamp().toLocalDateTime().toLocalDate().format(TIMESTAMP_FORMATTER),
                        senderName,
                        msg.getMessage());
                messageArea.append(display);
            }
        }
         // Scroll to the bottom
        messageArea.setCaretPosition(messageArea.getDocument().getLength());
    }

    /**
     * ActionListener for the send button and message input field.
     */
    private class SendButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            sendMessage();
        }
    }

    /**
     * Sends the message from the input field.
     */
    private void sendMessage() {
        String text = messageInput.getText().trim();
        if (!text.isEmpty()) {
            // Create a new message object
            Message newMessage = new Message(
                    0, // ID will be generated by DB
                    chatRoomId,
                    currentUser.getUserID(),
                    otherUser.getUserID(),
                    text,
                    java.sql.Timestamp.valueOf(LocalDateTime.now())
            );

            // Add message to database
            boolean success = DatabaseAccessor.addMessage(newMessage);

            if (success) {
                messageInput.setText(""); // Clear input field
                loadMessages(); // Refresh message display
            } else {
                JOptionPane.showMessageDialog(this, "Failed to send message.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
